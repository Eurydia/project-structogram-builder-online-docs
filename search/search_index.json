{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A Nassi-Shneiderman diagram, also known as a structogram, is a graphical representation outlining the sequential steps and control flows of a computer program.</p> <p>The project streamlines the coding process by transforming a piece of code into such a diagram, facilitating easier creation. The resulting diagram can be exported as an image or shared through a link using the live editor available at https://eurydia.github.io/project-nassi-shneiderman-diagram-builder-online/.</p>"},{"location":"#contacts","title":"Contacts","text":"<p>While I have diligently worked to cover all aspects of the project, it is possible that certain minor details may have been unintentionally overlooked.</p> <p>Should you have any questions or if there are aspects that require clarification, please do not hesitate to contact me through the following channels:</p> <ul> <li>LinkedIn: https://www.linkedin.com/in/thanakorn-phuttharaksa-120b361a1/</li> <li>Email: B9XP3X@inf.elte.hu</li> <li>GitHub: https://github.com/eurydia</li> </ul>"},{"location":"01-motivation/","title":"Background and motivation","text":"<p>During my first year in the Computer Science program at ELTE, I completed a fundamental programming course that incorporated Nassi\u2013Shneiderman diagrams in the coursework. As these diagrams are programming language-agnostic, they served as a practical introduction to programming, comparable to the utility of pseudocode or flowcharts.</p> <p>Unfortunately, I discovered early on that there was no straightforward method available for creating Nassi\u2013Shneiderman diagrams online or elsewhere. While the course briefly introduced a tool named \"Structorizer,\" it proved to be cumbersome and challenging for students to learn and use effectively.</p> <p>Various approaches were adopted by my peers to address this challenge. Some persevered with Structorizer, while others turned to graphic design tools such as Figma. Some even resorted to hand-drawing diagrams on paper and capturing them with a camera.</p> <p>In my case, I proactively addressed the challenge by developing a React UI component library to construct diagrams, initially meant for my personal use. As my proficiency in diagram creation became evident, several of my peers approached me for assistance, highlighting a clear need for a more accessible and user-friendly alternative.</p> <p>Recognizing the inefficiency of personally creating diagrams for others on an individual basis, I observed the widespread need for a more accessible and user-friendly alternative. This realization became the driving force behind taking the initiative to create this project.</p>"},{"location":"01-motivation/#mission-statement","title":"Mission statement","text":"<p>\"MermaidJS for Nassi\u2013Shneiderman diagrams.\"</p> <p>MermaidJS is a well-established JavaScript library in the frontend web development community which excels at dynamically constructing diagrams and charts. The project adopts a similar methodology to create Nassi\u2013Shneiderman diagrams from code snippets.</p>"},{"location":"01-motivation/#scopes-and-goals","title":"Scopes and goals","text":"<p>In addition to the core functionality of diagram creation, the project encompasses several features:</p> <ul> <li>Device Compatibility: Ensuring seamless functionality across various devices.</li> <li>Diagram Sharing and Export: Facilitating the easy sharing and exportation of created diagrams.</li> <li>Auto-Save Functionality: Implementing an automatic progress-saving mechanism.</li> <li>Online Accessibility and Responsiveness: Enabling online access with a responsive design for user-friendly interaction.</li> <li>User-Friendly Design: Prioritizing an intuitive and easily comprehensible interface to enhance the learning curve and overall usability of the platform.</li> </ul>"},{"location":"02-quick-start/","title":"Quick start","text":""},{"location":"02-quick-start/#getting-started","title":"Getting started","text":"<p>To begin, head over to the live editor at https://eurydia.github.io/project-structogram-builder-online/.</p>"},{"location":"02-quick-start/#interface-overview","title":"Interface overview","text":"<p>The editor presents two components:</p> <ul> <li>Code Editor: This is where the magic happens. A piece of code written here will be interpreted and transformed into a diagram.</li> <li>Live Preview: The resulting diagrams are displayed here in real-time.</li> </ul>"},{"location":"02-quick-start/#hello-world","title":"Hello World","text":"<p>For those using smaller screens like smartphones or tablets, the code editor might be hidden initially. If you find it hidden, tap on the \"SHOW CODE\" button to reveal it.</p> <p>In the code editor, type \"Hello World!;.\" The project should generate the corresponding diagram:</p>"},{"location":"02-quick-start/#export","title":"Export","text":"<p>Once you are satisfied with the diagram, you can use the export feature to save your diagram in three different file formats: PNG, JPEG, and SVG.</p> <p>Moreover, sharing is made seamless with the ability to generate a unique link for your diagram.</p>"},{"location":"03-supported-syntax/","title":"Supported syntax","text":"<p>The syntax draws inspiration from the C-style language with more flexibility to suit our use cases.</p> <p>The project delivers a comprehensive syntax for various programming constructs, including process blocks, for and while loops, do-while loops, if-else blocks, functions, and comments.</p> <p>It is worth noting that two structures from the orignal diagram design are currently not supported: parallel blocks and switch blocks, the latter being if-else blocks with more than two branches.</p> <p>The examples are fully interactive, as such, do feel free to play around and experiment with them.</p>"},{"location":"03-supported-syntax/#process","title":"Process","text":"<p>From Wikipedia's article on Nassi\u2013Shneiderman diagram:</p> <p>\"A process represents the simplest of steps and requires no analysis. When a process block is encountered, the action described is performed before moving onto the next.\"</p> <p>A process is a sequence of words and symbols separated by spaces and terminates by a semicolon.</p> <p>A process can contain any number of words and symbols, but it must contain at least one word or symbol.</p>"},{"location":"03-supported-syntax/#loop","title":"Loop","text":"<p>From Wikipedia's article on Nassi\u2013Shneiderman diagram:</p> <p>\"The loop allows the program to loop one or a set of processes until a particular condition is fulfilled.\"</p> <p>The project supports two types of loops: test-first loops and test-last loops, each differing in the sequence of executed steps.</p> <ul> <li>Test-First Loops: In these loops, the condition is assessed before the execution of processes, aligning with the behavior of for loops and while loops.</li> <li>Test-Last Loops: Conversely, test-last loops evaluate the condition after the processes have been executed, mirroring the behavior of do-while loops.</li> </ul> <p>Both types of loops consist of two components:</p> <ul> <li>Condition Component: Enclosed within parentheses, this component comprises elements directly derived from the code, and pasted onto the diagram.</li> <li>Body Component: Enclosed within curly braces, this component defines the processes to be iteratively performed.</li> </ul>"},{"location":"03-supported-syntax/#for-loop","title":"For loop","text":"<p>Additionally, it's worth noting that a test-first loop can be invoked with either \"for\" or \"while.\" The project generates the same diagram for both variations, making no distinction between the keywords.</p>"},{"location":"03-supported-syntax/#do-while-loop","title":"Do-while loop","text":""},{"location":"03-supported-syntax/#if-else-block","title":"If-else block","text":"<p>From Wikipedia's article on Nassi\u2013Shneiderman diagram:</p> <p>\"The simple True/False branching block offers the program two paths to take depending on whether or not a condition has been fulfilled.\"</p> <p>If-else blocks consist of two components:</p> <ul> <li>Condition Component: Enclosed within parentheses, this component comprises elements directly derived from the code, and pasted onto the diagram.</li> <li>Body Component: Enclosed within curly braces, this component defines the processes to be performed when the condition is fulfilled.</li> </ul> <p>The \"else\" keyword is used to access the other branch.</p>"},{"location":"03-supported-syntax/#function","title":"Function","text":"<p>\"Functions encapsulate specific sets of processes. They promote clarity and reusability.\"</p> <p>Functions and procedures within the project are characterized by two components:</p> <ul> <li>Declaration Components: From the beginning of the statement up to the opening curly braces, this component comprises elements directly derived from the code, and pasted onto the diagram.</li> <li>Body Component: Enclosed within curly braces, this component encapsulates the procedural elements of the function or procedure, defining the processes to be executed.</li> </ul>"},{"location":"03-supported-syntax/#comment","title":"Comment","text":"<p>Comments within the project are invoked with two forward slashes. When a line is commented, the remainder of the line is excluded from the diagram.</p> <p>Importantly, comments are preserved when a diagram is shared through a link. This ensures that the explanatory remarks remain intact, contributing to the collaborative and communicative nature of the shared diagrams.</p>"},{"location":"03-supported-syntax/#context-free-grammar","title":"Context-free grammar","text":"<p>Note that:</p> <ul> <li>a star <code>*</code> means zero or more repetitions of the preceding element.</li> <li>a plus <code>+</code> means one or more repetitions of the preceding element.</li> <li>a verticle bar <code>|</code> means only one of the elements can be present.</li> <li>element enclosed by square brackets <code>[]</code> is optional.</li> <li>characters enclosed by single quotes <code>'</code> is a literal.</li> </ul> <pre><code>&lt;diagram&gt; ::= &lt;statement&gt;+\n\n&lt;statement&gt; ::= &lt;token&gt;* ';'\n            |   &lt;for-statement&gt;\n            |   &lt;while-statement&gt;\n            |   &lt;do-while-statement&gt;\n            |   &lt;if-statement&gt;\n            |   &lt;function&gt;\n\n&lt;for-statement&gt; ::= 'for' '(' &lt;token&gt;* ')' '{' &lt;statement&gt;* '}'\n\n&lt;while-statement&gt; ::= 'while' '(' &lt;token&gt;* ')' '{' &lt;statement&gt;* '}'\n\n&lt;do-while-statement&gt; ::= 'do' '{' &lt;statement&gt;* '}' 'while' '(' &lt;token&gt;* ')' ';'\n\n&lt;if-statement&gt; ::= 'if' '(' &lt;token&gt;* ')' '{' &lt;statement&gt;* '}' ['else' '{'&lt;statement&gt;* '}']\n\n&lt;function&gt; ::= &lt;non-keyword-token&gt;+ &lt;token&gt;* '{' &lt;statement&gt;* '}'\n\n&lt;keyword-token&gt; ::= 'for'\n                |   'while'\n                |   'do'\n                |   'if'\n\n&lt;token&gt; ::= &lt;any-character&gt;+\n\n&lt;any-character&gt; ::= &lt;letter&gt;\n                |   &lt;digits&gt;\n                |   &lt;non-whitespace-character&gt;\n</code></pre>"},{"location":"04-examples/","title":"Examples","text":"<p>This section demonstrates the capabilities to draw diagrams. It is not a tutorial on how to use the project, but rather a showcase of what the project can do.</p>"},{"location":"04-examples/#variable-assignment","title":"Variable assignment","text":"<p>Variable assignment is a fundamental concept that involves giving a name to a piece of data. It allows for storage and manipulation of information within a computer program.</p> <p>When a value is assigned to a variable, it is akin to instructing the system, \"Remember this information by this name.\" It's like storing a number, a word, or any other data type under a chosen label. The label can then be utilized in the code to perform operations, make decisions, or simply reference that piece of data.</p> <p>Textual description:</p> <p>Pseudocode style using \":=\" symbol:</p> <p>Pseudocode style using \"&lt;-\" symbol:</p>"},{"location":"04-examples/#type-annotation","title":"Type annotation","text":"<p>Type annotation is the practice of explicitly specifying the data type of a variable. This helps in defining the kind of information that a variable can hold, promoting code clarity and preventing potential errors.</p> <p>When annotating the type of a variable, additional information is provided to both programmers and the compiler or interpreter. It is similar to informing the system that a variable is meant to store numbers, text, or some other specific data type.</p> <p>Textual description:</p> <p>C programming language style:</p> <p>Python style:</p>"},{"location":"04-examples/#loop","title":"Loop","text":"<p>Textual Description (Test-first loop):</p> <p>Pseudocode style (Test-first loop):</p> <p>Python style:</p> <p>C style:</p>"},{"location":"04-examples/#functions","title":"Functions","text":"<p>Python style:</p> <p>C style:</p> <p>Bash style:</p>"},{"location":"04-examples/#sequence-calculation","title":"Sequence calculation","text":"<p>Sequence calculation is a pattern of algorithm which reduces a sequence of elements to one element, which is archieved by repeated applying functions or operations to two elements and combining them into one.</p> <p>Sequence calculation on integers using addition:</p>"},{"location":"04-examples/#counting","title":"Counting","text":"<p>Counting is a pattern of algorithm which reduces a sequence of elements to a natural number. It looks at every element in a sequence and see how many of those elements have a certain property.</p> <p>Counting the number of primes numbers in an interval:</p>"},{"location":"04-examples/#maximum-selection-and-minimum-selection","title":"Maximum selection and minimum selection","text":"<p>Maximum selection and minmium selection are a similar pattern algorithm. Both of them reduce a sequence of elements to one element. This element is either the \"maximum\" or the \"minimum\" element of the sequence.</p> <p>Maximum selection on integers:</p> <p>Minimum selection on integers:</p>"},{"location":"04-examples/#search","title":"Search","text":"<p>Search is a pattern of algorithm which reduces a sequence of elements to one element. The element is chosen based on whether it has a certain property or not. However, such an element might not exist in the sequence.</p> <p>Searching for a prime number in a sequence of integers, defaults to \"-1\" when the sequence does not contain a prime number:</p>"},{"location":"04-examples/#selection","title":"Selection","text":"<p>Selection is a pattern of an algorithm which reduces a sequence of elements to one element. Unlike Search, at least one such element exists.</p> <p>Selecting the last prime number in a sequence of integers:</p>"},{"location":"04-examples/#decision","title":"Decision","text":"<p>Decision is a pattern of an algorithm which reduces a sequence of elements to a boolean value. If an element in a sequence satisfies a certain property, it resolves to true, and false otherwise.</p> <p>Decide whether a sequence of integers contains a prime number or not:</p>"},{"location":"04-examples/#algorithmic-patterns-over-intervals","title":"Algorithmic patterns over intervals","text":"<p>An object-oriented programming summary of interval-based patterns of algorithms.</p>"},{"location":"04-examples/#summation","title":"Summation","text":"<p>Consider an arbitrary set \\(H\\), a binary operation \\(\\text{+}:H\\times H\\to H\\) called addition, a neutral element \\(0\\in H\\) called zero, such that, \\(0+h\\mapsto h\\) for all \\(h\\in H\\), and a unary function \\(f:[m, n]\\to H\\) which maps integers in interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(H\\).</p> <p>The summation pattern takes an integer interval, perform operations on it, and reduce it down a single element.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z}, n:\\mathbb{Z}, r:\\mathbb{H})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left(r=\\sum_{i=m}^{n} f(i)\\right) \\end{aligned} \\]"},{"location":"04-examples/#counting_1","title":"Counting","text":"<p>Consider a predicate function \\(\\text{pred}:[m,n]\\to\\mathbb{L}\\) which maps each integer in the interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(\\mathbb{L}:=\\{\\top,\\bot\\}\\).</p> <p>In general, the counting pattern takes an interval and count the number of elements which satisfy a condition.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z}, n:\\mathbb{Z}, r:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left(r=\\sum_{\\substack{i=m\\\\ \\text{pred}(i)}}^{n} 1\\right) \\end{aligned} \\]"},{"location":"04-examples/#maximum-selection","title":"Maximum selection","text":"<p>Consider a totally-ordered set \\(H\\), a total-ordering binary relation \\(\\gt\\subseteq H\\times H\\) called greater than, and a unary function \\(f:[m, n]\\to H\\) which maps integers in interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(H\\).</p> <p>The maxmima selection pattern takes a integer interval, and returns the maximal element. The semantic meaning of maximal element is different based on context and implementation.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z}, n:\\mathbb{Z}, r:\\mathbb{H}, k_{r}:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left((r,k_{r})=\\max_{i=m}^{n} f(i)\\right) \\end{aligned} \\]"},{"location":"04-examples/#conditional-maximum-selection","title":"Conditional maximum selection","text":"<p>Consider a totally-ordered set \\(H\\), a total-ordering binary relation \\(\\gt\\subseteq H\\times H\\) called greater than, a predicate function \\(\\text{pred}:[m,n]\\to\\mathbb{L}\\) which maps each integer in the interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(\\mathbb{L}:=\\{\\top,\\bot\\}\\), and a unary function \\(f:[m, n]\\to H\\) which maps integers in interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(H\\).</p> <p>The conditional maximum selection pattern takes an integer interval, and returns the maximal element which satisfy the given condition.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z}, n:\\mathbb{Z}, u:\\mathbb{L}, r:\\mathbb{H}, k_{r}:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left((u, r,k_{r})=\\max_{\\substack{i=m\\\\\\text{pred}(i)}}^{n} f(i)\\right) \\end{aligned} \\]"},{"location":"04-examples/#selection_1","title":"Selection","text":"<p>Consider a arbitrary set \\(H\\) and a predicate function \\(p:[m,n]\\to\\mathbb{L}\\) which maps each integer in the interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(\\mathbb{L}:=\\{\\top,\\bot\\}\\).</p> <p>The selection pattern takes an integer interval and returns an element which satisfy the given condition with the assumption that such a element exists.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z}, k:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land (\\exists k\\in\\mathbb{Z}: k\\ge m\\land p(k))\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left(k=\\underset{i\\ge m}{\\text{SELECT }} p(i)\\right) \\end{aligned} \\]"},{"location":"04-examples/#linear-search","title":"Linear search","text":"<p>Consider a arbitrary set \\(H\\) and a predicate function \\(p:[m,n]\\to\\mathbb{L}\\) which maps each integer in the interval \\([m,n]\\subseteq\\mathbb{Z}\\) to \\(\\mathbb{L}:=\\{\\top,\\bot\\}\\).</p> <p>The linear search pattern takes an integer interval and returns the first element which satisfy the given condition, though such an element might not exist.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z},n:\\mathbb{Z},u:\\mathbb{L}, k:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left((u, k) = \\underset{i=m}{\\overset{n}{\\text{SEARCH }}} p(i)\\right) \\end{aligned} \\]"},{"location":"04-examples/#binary-search","title":"Binary search","text":"<p>Consider a totally-ordered set \\(H\\), an element \\(h\\in H\\), a total-ordering binary relation \\(\\gt\\subseteq H\\times H\\) called greater than, and a monotomically-increasing unary function \\(f:[m,n]\\to H\\) which maps integers in the interval \\([m,n]\\) to \\(H\\).</p> <p>The binary search pattern takes an integer interval and decide whether it contains specific element or not.</p> \\[ \\begin{aligned} A&amp;:=(m:\\mathbb{Z},n:\\mathbb{Z},h: H, u:\\mathbb{L}, k:\\mathbb{Z})\\\\ \\text{pre}&amp;:=m=m'\\land n=n'\\\\ \\text{post}&amp;:=\\text{pre}\\land\\left(u=\\left(\\exists i\\in\\mathbb{Z}:i\\in[m,n]\\land f(i)=h\\right)\\right)\\land\\left(u\\implies (k\\in[m,n]\\land f(k)=h\\right) \\end{aligned} \\]"},{"location":"05-acknowlegdement/","title":"Acknowledgement","text":"<p>Asmara Gracia, Cholpon Esenalieva, Edmond Andre Balaj, S. Urairat, and Kurtis for proofreading and pointing out inconsistencies within the documentation.</p> <p>Vincze M\u00e1t\u00e9 for his invaluable contribution to the development of the project. His enthusiasm and interest in the project served as a constant source of motivation and inspiration throughout its creation. Without his positive feedback and unwavering support, the project would not have reached its current stage, or even complete at all.</p> <p>Asel Bekbolot Kyzy (aselbekbolotkyzy25@gmail.com) for proofreading the documentation and providing feedback on the project, especially her opinion on the lack of comments. During the earlier stage of the project, I was rather hesitant to implement new features, but she pointed out that comment is a feature that most people have come to expect, and the project should support it.</p> <p>Daniya Safiullina for proofreading the documentation. The background and motivation section was rewritten to be more coherent and understandable because her ingenuity.</p> <p>Asel Temiralieva for proofreading the documentation and provide helpful insights and improvements. There were many aspects of the documentation that was changed, removed, or added. Namely, the syntax overview section and the example section were much less cohesive and consistent before I asked her for feedback.</p> <p>Nandin Munkhbat for providing feedback on UX/UI design, bug report, and, most importantly, suggestion to add implement syntax for functions and prodcedures. She suggested that functions and procedures are good ways of labeling and capturing the logic a task. To which, I agreed and implemented support both functions and procedures.</p>"}]}